name: Deploy to Server

on:
  push:
    branches:
      - main

permissions:
  packages: write

jobs:
  commit-hash:
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.get_commit.outputs.commit_hash }}
    steps:
      - uses: actions/checkout@v4
      - name: Get commit hash
        id: get_commit
        run: echo "::set-output name=commit_hash::$(git rev-parse HEAD)"

  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Build
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  
        run: bun run build
      - name: Lint
        run: bun run lint

  build-and-push-image:
    needs:
      - build-and-test
      - commit-hash
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/naufaldi/image-extract:${{ needs.commit-hash.outputs.commit_hash }}
            ghcr.io/naufaldi/image-extract:prod
          build-args: |
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image
      - commit-hash
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "Starting deployment..."
          
          # Check if web network exists
          echo "Checking if web network exists..."
          docker network ls | grep web
          
          # Create project directory
          mkdir -p ~/image-extract
          cd ~/image-extract

          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull the latest image
          docker pull ghcr.io/naufaldi/image-extract:prod
          
          # Create docker-compose.prod.yml
          cat > docker-compose.prod.yml << 'EOL'
          version: '3.8'
          
          services:
            app:
              image: ghcr.io/naufaldi/image-extract:prod
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.image-extract.rule=Host(`image.faldi.xyz`)"
                - "traefik.http.routers.image-extract.entrypoints=websecure"
                - "traefik.http.routers.image-extract.tls.certresolver=myresolver"
                - "traefik.http.services.image-extract.loadbalancer.server.port=3000"
                - "traefik.docker.network=web"
                - "com.centurylinklabs.watchtower.enable=true"
              ports:
                - "3000"
              environment:
                - NODE_ENV=production
                - OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
              deploy:
                mode: replicated
                replicas: 2
              restart: always
              networks:
                - web
          
          networks:
            web:
              external: true
          EOL
          
          # Deploy using docker-compose.prod.yml
          docker compose -f docker-compose.prod.yml down || true
          docker compose -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -f